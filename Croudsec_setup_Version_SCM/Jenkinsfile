pipeline {

    agent { label "${ENV_AGENT}" }


   parameters {
       choice(name: 'ENV_AGENT', choices: ['DEV', 'STAG', 'PROD'], description: 'The environment agent to deploy to ${ENV_AGENT}')
       choice(name: 'VERSION_IS', choices: ['latest','v1.4.5','v1.4.6'], description: 'What Version is installed')
       choice(name: 'VERSION_SHOULD', choices: ['latest','v1.4.5','v1.4.6','v1.4.7','v1.4.8','v1.4.9'], description: 'What Version need to be installed')
    }


    stages {
        stage('Change crowdsec template') {
            steps {
                sh '''sudo sed -i 's/crowdsec:'${VERSION_IS}'/crowdsec:'${VERSION_SHOULD}'/' /opt/containers/crowdsec/docker-compose.yml'''
            }
		}
        stage('Restart crowdsec') {
            steps {
                sh '''sudo docker compose -f /opt/containers/crowdsec/docker-compose.yml up -d --force-recreate'''
                sleep 10
                sh '''sudo docker exec crowdsec cscli hub update && sudo docker exec crowdsec cscli decisions list'''
            }
		}
		stage('Validation of crowdsec') {
            steps {
                sh '''sudo docker exec crowdsec cscli metrics | grep "Acquisition Metrics:" -A7'''
                sh '''docker exec crowdsec cscli hub update && docker exec crowdsec cscli hub upgrade'''
            }
		}
    }
}
